/*
    // Place your snippets for C# here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    "Print to console": {
        "prefix": "dl",
        "body": [
            "Debug.log("$1");",
            "$2"
        ],
        "description": "Log output to console"
    }
*/
{
	"EntitasComponent": {
		"prefix": "EntitasComponent",
		"body": [
			"public class $1Component : IComponent { $0}"
		]
	},

	"Feature": {
		"prefix": "Feature",
		"body": [
			"public class $1Systems : Feature {",
			"    public $1Systems(Contexts c) {",
			"        Add(new $0(c));",
			"    }",
			"}"
		]
	},

	"AddReactEach": {
		"prefix": "addrea",
		"body": [
			"AddReactEach(${1:Game}Matcher.${2:MyComponent}, e => {",
			"    $0",
			"});"
		]
	},
	//my creation
	"Component": {
		"prefix": "cpm",
		"body": [
			"[${1}]",
			"public class ${2:MyComponent}Component : IComponent {${3}}",
		]
	},

	"AddInitialize": {
		"prefix": "AddInitialize",
		"body": [
			"AddInitialize(() => {",
			"    $0",
			"});"
		]
	},

	"AddExecute": {
		"prefix": "AddExecute",
		"body": [
			"AddExecute(() => {",
			"    $0",
			"});"
		]
	},

	"AddCleanup": {
		"prefix": "AddCleanup",
		"body": [
			"AddCleanup(() => {",
			"    $0",
			"});"
		]
	},



	"OnEntityAdded": {
		"prefix": "onEntityAdded",
		"body": [
			"var ${1:myGroup} = c.game.GetGroup(GameMatcher.${2:MyComponent});",
			"${1:myGroup}.OnEntityAdded += (g, e, index, comp) => {",
			"    $0",
			"};"
		]
	},

	"RequestComponent": {
		"prefix": "RequestComponent",
		"body": [
			"[Net]",
			"[Send, Save][MessagePackObject]",
			"public class $1RequestComponent : IComponent { }"
		]
	},

	"AddSyncedActionHandler": {
		"prefix": "actionHandler",
		"body": [
			"c.AddSyncedActionHandler(NetMatcher.${1:MyComponent}, action => {",
			"    $0",
			"});"
		]
	},

	"AddRequestHandler": {
		"prefix": "requestHandler",
		"body": [
			"c.AddRequestHandler(NetMatcher.${1:MyComponent}, req => {",
			"    $0",
			"});"
		]
	},

	"Debug Log": {
		"prefix": "dl",
		"body": "Debug.Log($\"$0\");"
	},

	/* ==== STANDARD (OmniSharp) SNIPPETS ==== */


	"Console.WriteLine": {
		"prefix": "cw",
		"body": [
			"Console.WriteLine(\"$0\");"
		],
		"description": "Console.WriteLine"
	},
	"Foreach statement": {
		"prefix": "foreach",
		"body": [
			"foreach (${1:var} ${2:item} in ${3:collection}) {",
			"    $0",
			"}"
		],
		"description": "Foreach statement"
	},
	"Reverse for loop": {
		"prefix": "forr",
		"body": [
			"for (int ${1:i} = ${2:length} - 1; ${1:i} >= 0; ${1:i}--) {",
			"    $0",
			"}"
		],
		"description": "Reverse for loop"
	},
	"for loop": {
		"prefix": "for",
		"body": [
			"for (int ${1:i} = 0; ${1:i} < ${2:length}; ${1:i}++) {",
			"    $0",
			"}"
		],
		"description": "for loop"
	},
	"Switch statement": {
		"prefix": "switch",
		"body": [
			"switch (${1:switch_on}) {",
			"    $0",
			"    default:",
			"}"
		],
		"description": "Switch statement"
	},
	"Try catch": {
		"prefix": "try",
		"body": [
			"try {",
			"    $1",
			"} catch (${2:System.Exception}) {",
			"    $0",
			"    throw;",
			"}"
		],
		"description": "Try catch"
	},
	"While loop": {
		"prefix": "while",
		"body": [
			"while (${1:true}) {",
			"    $0",
			"}"
		],
		"description": "While loop"
	}
}
